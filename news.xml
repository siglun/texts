<div xmlns="http://www.w3.org/1999/xhtml">
  <div>
    <h1 style="width: 58%; float: left;text-align: leftt">Why I love XSLT extension functions</h1>
    <p style="width: 38%; float: left;text-align: right">
      <em>
        <strong>
		Sigfrid Lundberg's Stuff,
	      2009-07-21</strong>
      </em>
    </p>
  </div>
  <div style="clear:both;"> </div>
  <div style="width:100%;">
    <div>

      <p>I started learning XSLT eight years ago. At the time, it was a fresh
      technology, and there was also intense discussions on the extensibility
      of the language. Since then xslt 1.1 has disappeared down the drains,
      xpath 2.0 &amp; xquery 1.0 appeared on the market. The former of these
      has had a slow start. The latter, however, has gained acceptance,
      however a bit reluctant.</p>

      <p>The stuff I want to discuss here is the writing of extension
      functions. This is regarded as an evil habit in some parts of the XML
      processing communities, but it is supported by most implementations. It
      is not to be recommended if you're producing a stand-alone application,
      but in many cases you're xslt code is an integrated part of an
      application. Most of my code is of this kind; in particular I'm writing
      xslt for xalan running in a JAVA environment. Now, why should I refrain
      from using regex, just because xalan does not support this package? I
      cannot see why. And nobody would ask me to write ANSI SQL in spite of
      the fact that we use Oracle.</p>

      <p>Now, it has been proven mathematically that xslt is a <a href="http://www.ibm.com/developerworks/library/x-xalanextensions.html">Turing
      complete</a> programming language. That means that it is possible to
      program <strong>anything</strong> which is possible to program with such
      a language. I.e., you have theoretically the same possibilities as in
      JAVA and C++. That doesn't mean that it is practical do do so. It is, in
      my view, much easier to traverse a XML tree in XSLT than in (say) JAVA,
      whereas it is much easier to connect to a database or implement a XSLT
      processor using a conventional programming language.</p>

      <p>It is here the XSLT extension functions become really useful. You can
      pass data from XSLT to your own functions written in your favourite
      programming lanuguage. I use this for tasks like indexing XML
      documents. When traversing a document, you select text and pass it to
      you're function which pass it to your indexing API. One big advantage is
      that the same software can index heterogenous collections of XML
      documents just by using different XSLT scripts. They are easy to write
      and you can a new document type without recompilation of you're indexing
      software.</p>

      <p>This ability of a fullblown functional programming language (mind
      you, its Turing complete) to interface both with a host program and from
      scripts inside it call other functions in other languages is
      powerful. This, in combination that it is really good for what it is
      designed for has made it an object for extreme affection from
      me. Besides I'll return to examples of using XSLT for indexing complex
      XML objects.</p>

    </div>
    <p style="text-align: right">
      <em>
        <strong>
		Permalink:
	      </strong>
      </em>
      <a rel="bookmark" href="/entries/2009/07/xslt_extensions/">http://www.sigfrid-lundberg.se/entries/2009/07/xslt_extensions/</a>
    </p>
    <hr width="50%" align="center"/>
  </div>
  <div>
    <h1>Other, not yet obsolete stuff</h1>
    <table class="news">
      <tr>
        <td class="left">2009</td>
        <td class="left"><a href="/entries/2009/07/structure/"><em>The description and encoding of structure</em></a><br/>Much metadata is fairly stright forward. A book does have a title
  and an author. That's usually no big deal. We've been able to handle that
  for centuries. A digital book has chapters, and everything you might want to
  know may be in chapter two on page seventyfive. Or someone may tell you the
  solution to your problems after a quarter of an hour in some video on
  YouTube. Now, how do we cope with this?<br/><a href="/subjects/structuralwebdesign/">Structural web design</a>,
	<a href="/subjects/metadata/">Metadata</a></td>
      </tr>
      <tr>
        <td class="left">2009</td>
        <td class="left"><a href="/entries/2009/07/commuting/"><em>Why do I keep this site?</em></a><br/>Having had a web site for about 15 years, I start to wonder why I
  keep it in the first place.<br/><a href="/subjects/structuralwebdesign/">Structural web design</a></td>
      </tr>
      <tr>
        <td class="left">2009</td>
        <td class="left"><a href="/entries/2009/07/escience/"><em>Will the research libraries play a role in e-science</em></a><br/>I was asked to participate in an e-science pilot project.  The work
  in the project has been food for thought for me. Will libraries be a part of
  a future eScience infrastructure?<br/><a href="/subjects/escience/">eScience</a></td>
      </tr>
      <tr>
        <td class="left">2009</td>
        <td class="left"><a href="/entries/2009/07/victory/"><em>The predator rests on its prey</em></a><br/>I've seen this image before. An excavator has demolished a
  building, and has then proudly been parked on top of the remnants.<br/><a href="/subjects/essays/">Essays</a></td>
      </tr>
      <tr>
        <td class="left">2009</td>
        <td class="left"><a href="/entries/2009/07/technorati/"><em>This is a dummy entry for technorati</em></a><br/>uw5m38jba7
  <br/><a href="/subjects/structuralwebdesign/">Structural web design</a></td>
      </tr>
      <tr>
        <td class="left">2009</td>
        <td class="left"><a href="/entries/2009/07/client_side_xslt/"><em>XML on the web, Client Side XSLT and Google</em></a><br/>The market has forced the major browser manufacturers to converge
  on standards. But why are the search engines lagging behind? Browsers are
  capable of AJAX and advanced XML processing, but the search engines are
  still basically just removing tags and presenting raw text extracts.<br/><a href="/subjects/structuralwebdesign/">Structural web design</a></td>
      </tr>
    </table>
  </div>
</div>
