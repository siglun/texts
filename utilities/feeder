#!/usr/bin/perl -w

use strict;
use XML::LibXML;
use XML::LibXSLT;
use Getopt::Long;

my $xml_version = '1.0';
my $char_encod  = 'UTF-8';
my $atomNS      = 'http://www.w3.org/2005/Atom';
my $atom_qname  = 'feed';
my $transform_sheet = 'utilities/atom_entry_to_page.xsl';

my $parser     = new XML::LibXML; 
my $xslt       = new XML::LibXSLT;
my $style_doc  = $parser->parse_file($transform_sheet);
my $stylesheet = $xslt->parse_stylesheet($style_doc);


my $atomfile    = '';
my $directory   = '';
my $debug       = '';
my $show_hidden = '';

my $result = GetOptions ("atomfile=s"    => \$atomfile,  
			 "directory=s"   => \$directory,
			 "show_hidden=s" => \$show_hidden,
			 "debug=s"       => \$debug);


die "Invalid arguments" unless(-d $directory);

my $dom;
my $feed;

if($atomfile) {
    open my($fh), $atomfile;
    binmode $fh;
    $dom = $parser->parse_fh($fh);
    $feed = $dom->documentElement();

} else {
    $dom = XML::LibXML::Document->new($xml_version,$char_encod);
    $feed = $dom->createElementNS( $atomNS, $atom_qname );
    $dom->setDocumentElement($feed);
}

open my($find), "find $directory -name '*.atom' -print|" or 
    die "Cannot open $directory";

while(my $entryFile = <$find>) {
    chomp $entryFile;
    $entryFile =~ m|(.+?)/([^/]+)$|;
    my $directory = $1;
    if(-f "$directory/hide") {
	next unless $show_hidden;
    }

    my $html_file = "$directory/index.shtml";

    # don't rebuild what hasn't changed
    #
    # next if -e $html_file && (-M $entryFile > -M $html_file );
    #
    # works, but fails to rebuild navigation
    
    open my($h), $entryFile;
    my $entry = $parser->parse_fh($h);
    close $h;
    my $results;
    if($debug) {
	$results = $stylesheet->transform($entry,'debug'=>"'".$debug."'");
    } else {
	$results = $stylesheet->transform($entry);
    }
    open my $out, ">$html_file";
    binmode $out,':raw'; 
    $results->toFH($out);
    close $out;
    my $element = $entry->documentElement();
    $feed->appendChild($element);
}
close $find;
binmode STDOUT,':raw';
print $dom->toString();
