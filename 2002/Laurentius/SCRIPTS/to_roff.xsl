<?xml version='1.0' encoding="ISO-8859-1" ?>
<xsl:transform  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
	        xmlns="http://www.w3.org/1999/xhtml">

<!--
	Reformats a HTML document to troff
	$Id$
-->

        <xsl:output omit-xml-declaration="yes"
               method="text"
               media-type="application/x-troff-ms"
	       indent = "no"
               encoding="ISO-8859-1" 	
    />

<xsl:strip-space elements = "*" /> 
<xsl:preserve-space elements = "pre" /> 

<xsl:template match="/" > 
<xsl:apply-templates select="html" />
</xsl:template>

<xsl:template match="html" >.\" This is autogenerated from xhtml using
.\" XSLT. Do not edit!
.hla se
.hpf hyphen.se
.nr PI 2.5n
.nr PS 12
.nr VS 14
.nr PO 6c
.po 6c
.nr LL 9c
.ll 11c
.nr HM 5c
.nr PL 24c
.pl 24c
.nr FM 4c
.\"nr PL 29.7c
.\"nr FM 8c
.mso tmac.bok
.de BT
.ie d RCSID \{\
.   ie o .tl ''%''
.   el .tl ''%''
.   rm RCSID
.   outnope
.\}
.el .outhead
..
<xsl:apply-templates />
</xsl:template>

<xsl:template match='head'>.\" Matching head<xsl:apply-templates />
</xsl:template>

<xsl:template match="title" />

<xsl:template match='meta'>
.\" Matching meta
<xsl:choose><xsl:when test="contains(string(@name),'DC.title.part')">
.ds chapter "<xsl:value-of select="@content" />
</xsl:when>
<xsl:when test="contains(string(@name),'DC.title.main')">
.ds book "<xsl:value-of select="@content" />
</xsl:when>
<xsl:when test="contains(string(@name),'RCSID')">
.ds RCSID "<xsl:value-of select="@content" />
</xsl:when></xsl:choose>
</xsl:template>

<!-- I had to define a few tags of my own. I'm particularly proud of
this one, which I regard a significant contribution -->

<xsl:template match='ignore'>
.ig
<xsl:apply-templates /> 
..
</xsl:template>

<xsl:template match="body">
.\" Matching body
<xsl:apply-templates /></xsl:template>

<xsl:template match='h1' >
.LP
.CHAPTER "<xsl:apply-templates />
</xsl:template>

<xsl:template match='h2|h3|h4|h5|h6|h7'>
.SH
<xsl:apply-templates /> 
</xsl:template>

<xsl:template match='span'><xsl:choose>
<xsl:when test="contains(string(@class),'anfang')">
.anfang <xsl:apply-templates /> 3
</xsl:when>
<xsl:when test="contains(string(@class),'initial')">
.initial "<xsl:apply-templates />"
</xsl:when>
<xsl:otherwise><xsl:apply-templates /></xsl:otherwise>
</xsl:choose>
</xsl:template>


<xsl:template match='p'>
.\" Matching paragraph
<xsl:choose>
<xsl:when test="contains(string(@class),'author')">
.AU
<xsl:apply-templates /> 
</xsl:when>
<xsl:when test="contains(string(@class),'abstract')">
.AB
.ps 10
.vs 12
<xsl:apply-templates /> 
.AE
</xsl:when>
<xsl:when test="contains(string(@class),'noindent')">
.LP
<xsl:apply-templates /> 
</xsl:when>
<xsl:when test="contains(string(@class),'center')">
.BD
.sp
<xsl:apply-templates />
.DE
</xsl:when>
<xsl:otherwise>
.PP
<xsl:apply-templates /> 
</xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match='dl'>
.\" definition list
<xsl:apply-templates /> 
</xsl:template>

<xsl:template match='dt'>
.XP
\fB<xsl:apply-templates />\fP
.br
</xsl:template>

<xsl:template match='dd'>
<xsl:apply-templates />
</xsl:template>


<xsl:template match='ul|ol'>
.\" A list is coming
<xsl:apply-templates /> 
</xsl:template>
<xsl:template match='li'>
.\" A list item
.IP \fB\s+3\(bu\s-3\fP
<xsl:apply-templates /> 
</xsl:template>

<xsl:template match='strong|b'>\fB<xsl:apply-templates />\fP</xsl:template>

<xsl:template match='a'>
<xsl:choose>
<xsl:when test="contains(string(@href),'not')">\**
.FS
<xsl:value-of select="@title" />
.br
\f(CR<xsl:value-of select="@uri" />\fP
.FE
</xsl:when>
<xsl:when test="contains(string(@name),'sect')"><xsl:apply-templates /></xsl:when>
<xsl:when test="contains(string(@class),'not')">
<xsl:apply-templates />\**
.FS
<xsl:value-of select="@title" />
.FE
</xsl:when>
<xsl:otherwise><xsl:apply-templates />\**
.FS
\f(CR<xsl:value-of select="@href" />\fP
.FE
</xsl:otherwise>
</xsl:choose>         
</xsl:template>

<xsl:template match="table">
.\" We start a table here
.LP
.TS
<xsl:choose>
<xsl:when test="number(@border) &gt; 0">
box expand tab(;); 
<xsl:value-of select="@format" /> .
</xsl:when>
</xsl:choose>
<xsl:apply-templates />
.TE
</xsl:template>

<xsl:template match="tr">
<xsl:apply-templates />
_
</xsl:template>

<xsl:template match="br">
<xsl:apply-templates/>
.br
</xsl:template>

<!-- A table cell seperated from the next cell with a semi-colon -->
<xsl:template match="td">T{
.na
<xsl:apply-templates />
T};</xsl:template>

<!-- A table header cell seperated from the next cell with a semi-colon -->
<xsl:template match="th">T{
.na
\fB<xsl:apply-templates />\fP
T};</xsl:template>

<xsl:template match='blockquote'><xsl:choose>
<xsl:when test="contains(string(@class),'box')">
.sp 0.5v
.B1
\fI<xsl:apply-templates />\fP
.B2
.sp 0.5v
</xsl:when>
<xsl:otherwise>
.QP
\fI<xsl:apply-templates />\fP</xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match='pre'>
.\" A preformatted block, here represented by an indented display
.LD
\f(CR\s-2<xsl:apply-templates />\s+2\fP
.DE
</xsl:template>

<xsl:template match='small'>\s-2<xsl:apply-templates />\s+2</xsl:template>

<xsl:template match='big'>\s+1<xsl:apply-templates />\s-1</xsl:template>

<xsl:template match='i|em'>\fI<xsl:apply-templates />\fP</xsl:template>

<xsl:template match='b|strong'>\fB<xsl:apply-templates />\fP</xsl:template>

<xsl:template match='img'>
.\" An eps image. This is a hack, since the perl script executing this
.\" Transformation has alreade changed .gif to .eps, so you better ensure
.\" That there is such an eps available
.KF
.PSPIC <xsl:value-of select="@src" />
.IP
.ps 10
.vs 12
.\"ll 8.0c
\fI<xsl:apply-templates />\fP
.sp 1.0c
.KE
</xsl:template>

<!--

	$Log$
	Revision 1.1  2009/06/29 11:06:30  sigfrid
	Initial revision

	Revision 1.2  2001/10/07 16:49:08  siglun
	Inclusion of images, etc

	Revision 1.1  2001/07/20 15:55:49  siglun
	Initial revision

	Revision 1.2  2001/05/04 16:40:49  siglun
	Fixed tables, page headers etc.

	Revision 1.1  2001/05/04 13:16:04  siglun
	Initial revision

-->

</xsl:transform>


