<?xml version='1.0' encoding="ISO-8859-1" ?>
<!DOCTYPE xsl:transform [
<!ENTITY mdash  "\(em" >
<!ENTITY ndash  "\(en" >
<!ENTITY rsquo "'">
<!ENTITY lsquo "`">
<!ENTITY rdquo "\(rq">
<!ENTITY ldquo "\(rq">
<!ENTITY sp " ">
<!ENTITY nl "

">
]>
<xsl:transform  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

<!--
	Reformats a TEI.2 document to troff
	$Id$
-->

        <xsl:output omit-xml-declaration="yes"
               method="text"
               media-type="application/x-troff-ms"
	       indent = "no"
               encoding="ISO-8859-1" 	
    />

<xsl:strip-space elements = "*" /> 

<xsl:template match="/" >
<xsl:apply-templates select="TEI.2" />
</xsl:template>

<xsl:template match="TEI.2" >.\" This is autogenerated using XSLT. Do not edit!
<xsl:apply-templates />
</xsl:template>

<xsl:template match="teiHeader" />

<xsl:template match="text" >
<xsl:apply-templates />
</xsl:template>

<xsl:template match="front" >
.ds RCSID <xsl:value-of select="/TEI.2/teiHeader/revisionDesc/change/@id" />
.TL
.hy 0
<xsl:value-of select="titlePage/titlePart" />
.hy 1
<xsl:for-each select="docAuthor/name">
<xsl:choose>
<xsl:when test="./@type='author'" >
.AU
</xsl:when>
<xsl:when test="./@type='affiliation'" >
.AI
</xsl:when>
</xsl:choose>
<xsl:value-of select="." />
</xsl:for-each>
.AB
<xsl:for-each select="div[@type='abstract']/p">
.small
<xsl:if test="position()&gt;1">
.sp 0.2v
</xsl:if>
<xsl:value-of select="." />
</xsl:for-each>
.AE
</xsl:template>

<xsl:template match="body" >
&nl;.\" **** TEXTHASSTARTED ****&nl;
<xsl:apply-templates />
</xsl:template>

<xsl:template match='div/head'>
.SH
<xsl:apply-templates />
</xsl:template>

<xsl:template match='div1[@type="acknowledgements"]'>
.LP
\f(BIAcknowledgments:\fR \(em
<xsl:value-of select='p' />
</xsl:template>


<xsl:template match='div1[@type="appendix"]'>
.bp
.SH
<xsl:apply-templates />
</xsl:template>

<xsl:template match='div1'>
.NH 1
<xsl:apply-templates />
</xsl:template>

<xsl:template match='div2'>
.NH 2
<xsl:apply-templates />
</xsl:template>

<xsl:template match='div3'>
.NH 3
<xsl:apply-templates />
</xsl:template>

<xsl:template match='div4'>
.NH 4
<xsl:apply-templates />
</xsl:template>

<xsl:template match='head'>
<xsl:apply-templates />
</xsl:template>

<xsl:template match='seg'><xsl:choose>
<xsl:when test="@rend='dropcap'">
.dropcap <xsl:apply-templates /> 3
</xsl:when>
<xsl:when test="@rend='capitals'">
.initial "<xsl:apply-templates />"
</xsl:when>
<xsl:otherwise><xsl:apply-templates /></xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match='p'>
.\" Matching paragraph
<xsl:choose>
<xsl:when test="@rend='noindent'">
.LP
<xsl:apply-templates /> 
</xsl:when>
<xsl:when test="@rend='box'">
.B1
.na
<xsl:apply-templates />
.ad
.B2
</xsl:when>
<xsl:when test="name(..)='quote'">
.IP
\fI<xsl:apply-templates />\fR
</xsl:when>
<xsl:otherwise>
.PP
<xsl:apply-templates /> 
</xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match='q'>&ldquo;<xsl:apply-templates />&rdquo;</xsl:template>

<xsl:template match='soCalled'>&ldquo;<xsl:apply-templates />&rdquo;</xsl:template>

<!-- Lists -->
<xsl:template match='list'>
.\" bullet list
<xsl:apply-templates /> 
</xsl:template>

<xsl:template match='item'>
.\" A list item
.IP \fB\(sq\fP
<xsl:apply-templates /> 
</xsl:template>

<xsl:template match="exemplum">
.KF
<xsl:apply-templates />
.sp
.KE
</xsl:template>

<xsl:template match="eg">
.ID
.small
\f(CR<xsl:apply-templates />\fR
.DE
</xsl:template>

<xsl:template match='emph'>\fI<xsl:apply-templates />\fR</xsl:template>
<xsl:template match='hi'><xsl:choose>
<xsl:when test="@rend='kbd'">\f(CR<xsl:apply-templates />\fR</xsl:when>
<xsl:when test="@rend='bold'">\fB<xsl:apply-templates />\fR</xsl:when>
<xsl:when test="@rend='italics'">\fI<xsl:apply-templates />\fR</xsl:when>
<xsl:when test="@rend='bold-italics'">\f(BI<xsl:apply-templates />\f(BR</xsl:when>
</xsl:choose>
</xsl:template>

<xsl:template match='p/figure'>
.\" An eps image. This is a hack, since the perl script executing this
.\" Transformation has alreade changed .gif to .eps, so you better ensure
.\" That there is such an eps available
.KF
<xsl:choose>
<xsl:when test="contains(unparsed-entity-uri(@entity),'eps')">
.PSPIC <xsl:value-of select="unparsed-entity-uri(@entity)" /> 11.0c
</xsl:when>
<xsl:when test="contains(unparsed-entity-uri(@entity),'ms')">
.so <xsl:value-of select="unparsed-entity-uri(@entity)" />
</xsl:when>
</xsl:choose>
.fine-print
.IP
.\"ll 8.0c
Figure <xsl:value-of select="@n" />.
<xsl:value-of select="./head" />
.sp 1.0c
.normal
.KE
</xsl:template>

<xsl:template match='note/p'>\**
.FS&nl;
<xsl:if test="./@rend = 'noadjust'">
.na
</xsl:if>
<xsl:apply-templates />
<xsl:if test="./@rend = 'noadjust'">
.ad
</xsl:if>
.FE&nl;
</xsl:template>

<xsl:template match='exemplum/p'>
.fine-print
.IP
<xsl:apply-templates />
.normal
</xsl:template>

<xsl:template match='note/bibl'>\**
.FS&nl;
.na&nl;
 <xsl:for-each select="author" >
   <xsl:choose>
     <xsl:when test="position()=1 and position()=last()">
       <xsl:value-of select="."/>:&nl;
     </xsl:when>
     <xsl:when test="position()=1 and not(position()=last())">
       <xsl:value-of select="."/>
     </xsl:when>
     <xsl:when test="position()>1 and not(position()=last())">;&nl;
       <xsl:value-of select="."/>
     </xsl:when>
     <xsl:when test="position()>1 and position()=last()">
       and&nl;<xsl:value-of select="."/>:&nl;
     </xsl:when>
  </xsl:choose>
 </xsl:for-each>    
  <xsl:apply-templates select="title" /> 
 <xsl:apply-templates select="edition" />
  <xsl:for-each select="editor" >
   <xsl:choose>
     <xsl:when test="position()=1 and position()=last()">&nl;
       <xsl:apply-templates/>&nl;(ed.)&nl;</xsl:when>
       <xsl:when test="position()=1 and not(position()=last())">&nl;
       <xsl:apply-templates/>
     </xsl:when>
     <xsl:when test="position()>1 and not(position()=last())">,&nl;
       <xsl:apply-templates/>
     </xsl:when>
     <xsl:when test="position()>1 and position()=last()">and&nl;
       <xsl:apply-templates/>&nl;(eds.)&nl;</xsl:when>
    </xsl:choose>
  </xsl:for-each>
  <xsl:apply-templates select="publisher" />
  <xsl:apply-templates select="imprint" />
 <xsl:apply-templates select="biblScope" />
 <xsl:apply-templates select="date" />
 <xsl:apply-templates select="title/xref/@to" mode="url" />.
.ad
.FE&nl;
</xsl:template>

<xsl:template match="p/title">\fI<xsl:apply-templates/>\fR</xsl:template>

<xsl:template match="title">
<xsl:apply-templates/>,&sp;
</xsl:template>

<xsl:template match="date">
<xsl:apply-templates/>.
</xsl:template>

<xsl:template match="edition">
<xsl:apply-templates/>
</xsl:template>

<xsl:template match="title/xref/@to" mode="url" >
.hy 0
\f(CR&lt;<xsl:value-of select="."/>&gt;\fR.
.hy 1
</xsl:template>


<xsl:template match="p/table">
.\" We start a table here
.KF
.fine-print
.IP
.\"ll 8.0c
Table <xsl:value-of select="@n" />.
<xsl:apply-templates select="head" />
.normal
.TS
center box tab(;); 
<xsl:value-of select="@rend" /> .
<xsl:for-each select="row"><xsl:text>&nl;</xsl:text>
<xsl:for-each select="cell">T{
.na
.small
<xsl:if test="./@rend='bold'">.ft B
</xsl:if>
<xsl:apply-templates />
T}<xsl:if test="not(position()=last())">;</xsl:if>
</xsl:for-each>
<xsl:text>&nl;_&nl;</xsl:text></xsl:for-each>
.TE
.KE
</xsl:template>

<xsl:template match="table/head">
<xsl:apply-templates />
</xsl:template>


<!--


	$Log$
	Revision 1.1  2009/06/29 11:06:31  sigfrid
	Initial revision

	Revision 1.4  2002/08/20 12:08:50  siglun
	Fixed the exemplum tag

	Revision 1.3  2002/03/24 09:42:08  siglun
	moved stuff to tmac.bok, in order to make the translation more generic

	Revision 1.2  2002/02/03 21:38:49  siglun
	Fixat så att div2 tolkas som en centrerad asterisk, om det inte
	är den första sektionen i kapitlet.

	Revision 1.1  2001/11/20 20:47:35  siglun
	Initial revision


-->

</xsl:transform>


